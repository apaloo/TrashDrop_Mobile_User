name: Firebase Deploy

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - '**'

env:
  FIREBASE_CLI_PREVIEWS: "hostingchannels"
  NODE_VERSION: '18'
  FIREBASE_TOOLS_VERSION: 'latest'

defaults:
  run:
    working-directory: ./

jobs:
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Firebase Tools
        run: npm install -g firebase-tools@${{ env.FIREBASE_TOOLS_VERSION }}

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
          cd functions && npm ci --prefer-offline --no-audit --progress=false

      - name: Build
        run: npm run build

      - name: Set up service account
        run: |
          mkdir -p $HOME/.config/gcloud
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > $HOME/.config/gcloud/application_default_credentials.json
          echo "FIREBASE_PROJECT=trashdrop-app" >> $GITHUB_ENV

      - name: Deploy to Production
        uses: w9jds/firebase-action@v2.0.1
        with:
          args: deploy --only hosting:production,functions --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $HOME/.config/gcloud/application_default_credentials.json
          FIREBASE_CLI_PREVIEWS: hostingchannels

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/staging' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Firebase Tools
        run: npm install -g firebase-tools@${{ env.FIREBASE_TOOLS_VERSION }}

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
          cd functions && npm ci --prefer-offline --no-audit --progress=false

      - name: Build
        run: npm run build:staging

      - name: Set up service account
        run: |
          mkdir -p $HOME/.config/gcloud
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > $HOME/.config/gcloud/application_default_credentials.json
          echo "FIREBASE_PROJECT=trashdrop-app-staging" >> $GITHUB_ENV

      - name: Deploy to Staging
        uses: w9jds/firebase-action@v2.0.1
        with:
          args: deploy --only hosting:staging,functions --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $HOME/.config/gcloud/application_default_credentials.json
          FIREBASE_CLI_PREVIEWS: hostingchannels

  deploy_preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment: 
      name: preview-${{ github.event.pull_request.number }}
      url: https://pr-${{ github.event.pull_request.number }}--trashdrop-app.web.app
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Firebase Tools
        run: npm install -g firebase-tools@${{ env.FIREBASE_TOOLS_VERSION }}

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
          cd functions && npm ci --prefer-offline --no-audit --progress=false

      - name: Build
        run: |
          echo "VITE_API_BASE_URL=https://pr-${{ github.event.pull_request.number }}--trashdrop-app.web.app/api" > .env
          npm run build

      - name: Set up service account
        run: |
          mkdir -p $HOME/.config/gcloud
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > $HOME/.config/gcloud/application_default_credentials.json
          echo "FIREBASE_PROJECT=trashdrop-app-preview" >> $GITHUB_ENV

      - name: Deploy Preview
        uses: w9jds/firebase-action@v2.0.1
        with:
          args: deploy --only hosting:preview-${{ github.event.pull_request.number }} --token "${{ secrets.FIREBASE_TOKEN }}" --non-interactive
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $HOME/.config/gcloud/application_default_credentials.json
          FIREBASE_CLI_PREVIEWS: hostingchannels

      - name: Add PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const hasExistingComment = comments.some(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Preview Deployment')
            );
            
            if (!hasExistingComment) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸš€ Preview deployment is ready!\n\nðŸ”— [Open Preview](https://pr-${context.issue.number}--trashdrop-app.web.app)\n\n_This is an automated message._`
              });
            }
