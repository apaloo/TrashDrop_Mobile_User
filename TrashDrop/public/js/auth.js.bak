/**
 * Authentication Module for TrashDrop
 * Handles Supabase initialization and authentication methods
 */

// Use an IIFE to create a private scope
(function() {
  'use strict';

  // Configuration - will be set from supabase-config.js
  const config = window.supabaseConfig || {
    url: 'https://cpeyavpxqcloupolbvyh.supabase.co',
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNwZXlhdnB4cWNsb3Vwb2xidnloIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0OTY4OTYsImV4cCI6MjA2MTA3Mjg5Nn0.5rxsiRuLHCpeJZ5TqoIA5X4UwoAAuxIpNu_reafwwbQ'
  };

  // Initialize with null, will be set when Supabase is loaded
  let supabase = null;

  // Create a mock Supabase client for fallback
  function createMockSupabaseClient() {
    console.warn('Using mock Supabase client - authentication will not work');
    return {
      auth: {
        signIn: async () => ({ error: 'Mock client - authentication disabled' }),
        signUp: async () => ({ error: 'Mock client - registration disabled' }),
        signOut: async () => ({ error: null }),
        session: () => ({ data: { session: null } }),
        onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } })
      },
      from: () => ({
        select: () => ({
          eq: () => ({
            single: async () => ({ data: null, error: 'Mock client' })
          })
        })
      })
    };
  }

  // Initialize Supabase client
  function initSupabase() {
    try {
      console.log('[AUTH] Initializing Supabase client...');
      
      // Configuration - will be set from supabase-config.js or use defaults
      const supabaseConfig = window.supabaseConfig || {
        url: 'https://cpeyavpxqcloupolbvyh.supabase.co',
        anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNwZXlhdnB4cWNsb3Vwb2xidnloIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0OTY4OTYsImV4cCI6MjA2MTA3Mjg5Nn0.5rxsiRuLHCpeJZ5TqoIA5X4UwoAAuxIpNu_reafwwbQ'
      };
      
      if (!supabaseConfig.url || !supabaseConfig.anonKey) {
        console.error('[AUTH] Missing Supabase configuration');
        return createMockSupabaseClient();
      }
      
      console.log('[AUTH] Supabase URL:', supabaseConfig.url);
      
      // Check if Supabase is available
      if (typeof window.supabase === 'undefined') {
        console.error('[AUTH] Supabase client not found in window object');
        return createMockSupabaseClient();
      }
      console.log('[AUTH] Supabase anonKey:', supabaseConfig.anonKey ? 'Present' : 'Missing');
      
      // Check if Supabase is available in global scope
      if (typeof window.supabase === 'undefined' || !window.supabase.createClient) {
        console.error('[AUTH] Supabase client not available in global scope');
        console.log('[AUTH] Available globals:', Object.keys(window).filter(k => k.toLowerCase().includes('supabase')));
        return createMockSupabaseClient();
      }
      
      try {
        // Create and return new client
        const client = window.supabase.createClient(supabaseConfig.url, supabaseConfig.anonKey);
        console.log('[AUTH] Supabase client created successfully');
        return client;
      } catch (error) {
        console.error('[AUTH] Failed to create Supabase client:', error);
        return createMockSupabaseClient();
      }
      console.log('[AUTH] Supabase anonKey:', supabaseConfig.anonKey ? 'Present' : 'Missing');
      
      // Validate configuration
      if (!supabaseConfig.url || !supabaseConfig.anonKey) {
        console.error('[AUTH] Error: Missing Supabase configuration');
        console.log('[AUTH] Using mock Supabase client');
        return createMockSupabaseClient();
      }
      
      if (!supabaseConfig.url.startsWith('http')) {
        console.error('[AUTH] Error: Invalid Supabase URL format');
        return createMockSupabaseClient();
      }
      
      if (supabaseConfig.anonKey.length < 30) {
        console.error('[AUTH] Error: Invalid Supabase key format');
        return createMockSupabaseClient();
      }

      // Create client using the global supabase instance from the CDN
      if (typeof supabase !== 'undefined') {
        console.log('[AUTH] Using global Supabase client');
        return supabase;
      }
      
      // Fall back to creating a new client if window.supabase is available
      if (typeof window.supabase !== 'undefined') {
        console.log('[AUTH] Creating new Supabase client from window.supabase');
        return window.supabase.createClient(supabaseConfig.url, supabaseConfig.anonKey);
      }
      
      console.error('[AUTH] Error: Supabase client not found');
      return createMockSupabaseClient();
    } catch (error) {
      console.error('[AUTH] Error initializing Supabase client:', error);
      return createMockSupabaseClient();
    }
  }

  // JWT token handling functions
  const jwtHelpers = {
    // Decode a JWT token without verification
    decodeToken: function(token) {
      try {
        if (!token) return null;
        const base64Url = token.split('.')[1];
        if (!base64Url) return null;
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        return JSON.parse(window.atob(base64));
      } catch (error) {
        console.error('Error decoding token:', error);
        return null;
      }
    },
    
    // Check if a token is expired
    isTokenExpired: function(token) {
      try {
        const decoded = this.decodeToken(token);
        if (!decoded || !decoded.exp) return true;
        return Date.now() >= decoded.exp * 1000;
      } catch (error) {
        console.error('Error checking token expiration:', error);
        return true;
      }
    }
  };

  // Initialize Supabase client and auth when Supabase is ready
  function initializeWhenReady(attempt = 0) {
    if (typeof window.supabase !== 'undefined' && window.supabase.createClient) {
      // Supabase is available, initialize our client
      console.log('[AUTH] Supabase client is available, initializing...');
      supabase = initSupabase();
      
      // Only initialize auth if we have a valid Supabase client
      if (supabase) {
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initializeAuth);
        } else {
          initializeAuth();
        }
      } else {
        console.error('[AUTH] Failed to initialize Supabase client');
      }
    } else if (attempt < 20) { // Try for up to 2 seconds (20 * 100ms)
      // Wait a bit and try again
      console.log(`[AUTH] Waiting for Supabase client... (attempt ${attempt + 1}/20)`);
      setTimeout(() => initializeWhenReady(attempt + 1), 100);
    } else {
      console.error('[AUTH] Timed out waiting for Supabase client');
      if (typeof window.alert === 'function') {
        window.alert('Failed to initialize authentication. Please refresh the page.');
      }
    }
  }
  
  // Start the initialization process when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    console.log('[AUTH] Starting Supabase initialization...');
    
    // First, check if Supabase is already initialized
    if (window.supabase) {
      console.log('[AUTH] Supabase already initialized');
      initializeWhenReady();
    } else {
      // Wait for Supabase to be ready
      document.addEventListener('supabase:ready', () => {
        console.log('[AUTH] Supabase ready event received');
        initializeWhenReady();
      });
      
      // Set a timeout in case the event is never fired
      setTimeout(() => {
        if (!supabase) {
          console.warn('[AUTH] Supabase ready event not received, trying to initialize anyway');
          initializeWhenReady();
        }
      }, 2000);
    }
  });

  // Public API
  const auth = {
    // Core authentication methods
    signIn: async function(email, password) {
      console.log('[AUTH] Starting sign in for email:', email);
      
      // Validate inputs
      if (!email || !password) {
        const error = new Error('Email and password are required');
        console.error('[AUTH] Validation error:', error.message);
        return { data: null, error };
      }
      
      try {
        // Check if Supabase is initialized
        if (!supabase || !supabase.auth) {
          const error = new Error('Supabase client not properly initialized');
          console.error('[AUTH] Error:', error);
          return { data: null, error };
        }
        
        console.log('[AUTH] Supabase client available, calling signIn...');
        
        // First try v2 signInWithPassword
        try {
          console.log('[AUTH] Trying v2 signInWithPassword method...');
          const { data, error: v2Error } = await supabase.auth.signInWithPassword({
            email,
            password
          });
          
          if (v2Error) throw v2Error;
          
          console.log('[AUTH] v2 sign in successful:', data);
          return { data, error: null };
          
        } catch (v2Error) {
          console.error('[AUTH] v2 sign in failed, trying v1...', v2Error);
          
          // Fall back to v1 signIn
          try {
            console.log('[AUTH] Trying v1 signIn method...');
            const { data, error: v1Error } = await supabase.auth.signIn({
              email,
              password
            });
            
            if (v1Error) {
              console.error('[AUTH] v1 sign in error:', v1Error);
              throw v1Error;
            }
            
            console.log('[AUTH] v1 sign in successful:', data);
            return { data, error: null };
            
          } catch (v1Error) {
            console.error('[AUTH] All sign in attempts failed:', v1Error);
            
            // Provide a more user-friendly error message
            let errorMessage = 'Authentication failed';
            if (v1Error.message) {
              errorMessage = v1Error.message;
            } else if (v1Error.error_description) {
              errorMessage = v1Error.error_description;
            } else if (v1Error.status === 400) {
              errorMessage = 'Invalid email or password';
            }
            
            // Return the error
            return { 
              data: null, 
              error: {
                message: errorMessage,
                status: v1Error.status || 401,
                details: v1Error
              }
            };
          }
        }
        
      } catch (error) {
        console.error('[AUTH] Unexpected error during sign in:', error);
        return { 
          data: null, 
          error: {
            message: error.message || 'An unexpected error occurred during sign in',
            status: 500,
            details: error
          }
        };
      }
    },
    
    signOut: async () => {
      try {
        const { error } = await supabase.auth.signOut();
        if (error) {
          console.error('Sign out error:', error);
          return { data: null, error };
        }
        return { data: { success: true }, error: null };
      } catch (error) {
        console.error('Sign out error:', error);
        return { 
          data: null, 
          error: {
            message: error.message || 'Failed to sign out',
            details: error
          } 
        };
      }
    },
    
    // Session management
    getSession: async () => {
      try {
        // For v1.x, the session is available directly from auth.session()
        const session = supabase.auth.session();
        return { session, error: null };
      } catch (error) {
        console.error('Get session error:', error);
        return { error };
      }
    },
    
    // Get current user directly
    getUser: async () => {
      try {
        // For v1.x, user is available in the session
        const session = supabase.auth.session();
        return { user: session?.user || null, error: null };
      } catch (error) {
        console.error('Get user error:', error);
        return { error };
      }
    },
    
    // Password reset
    resetPassword: async (email) => {
      try {
        const { data, error } = await supabase.auth.resetPasswordForEmail(email);
        return { data, error };
      } catch (error) {
        console.error('Password reset error:', error);
        return { error };
      }
    },
    
    // Check if user is authenticated
    isAuthenticated: async () => {
      try {
        // For v1.x, we can check the session directly
        const session = supabase.auth.session();
        const isAuthenticated = !!session?.user;
        
        console.log('[AUTH] isAuthenticated check:', { isAuthenticated, userId: session?.user?.id });
        
        return { 
          isAuthenticated,
          session,
          user: session?.user || null
        };
      } catch (error) {
        console.error('Auth check error:', error);
        return { 
          isAuthenticated: false, 
          error: error.message || 'Failed to check authentication status' 
        };
      }
    },
    
    // JWT helpers
    jwt: jwtHelpers,
    
    // Raw Supabase client (use with caution)
    client: supabase
  };
  
  // Initialize auth state listener
  function initAuthListener() {
    if (!supabase?.auth) {
      console.error('Cannot initialize auth listener: Supabase auth not available');
      return;
    }
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, session) => {
        console.log('Auth state changed:', event, session);
        // You can dispatch a custom event here if needed
        const authEvent = new CustomEvent('auth-state-changed', {
          detail: { event, session }
        });
        window.dispatchEvent(authEvent);
      }
    );
    
    // Return the unsubscribe function
    return () => {
      if (subscription?.unsubscribe) {
        subscription.unsubscribe();
      }
    };
  }
  
  // Initialize auth when Supabase is ready
  function waitForSupabase(attempt = 0) {
    if (window.supabase) {
      initializeAuth();
    } else if (attempt < 10) {
      console.log(`[AUTH] Waiting for Supabase... (attempt ${attempt + 1}/10)`);
      setTimeout(() => waitForSupabase(attempt + 1), 500);
    } else {
      console.error('[AUTH] Supabase not available after multiple attempts');
      window.alert('Failed to initialize authentication. Please refresh the page.');
    }
  }
  
  function initializeAuth() {
      try {
        // Initialize Supabase client
        supabase = initSupabase();
        
        if (!supabase) {
          console.error('[AUTH] Failed to initialize Supabase client');
          return;
        }
    
        // Verify Supabase client
        if (!supabase || !supabase.auth) {
          console.error('[AUTH] Error: Supabase client not properly initialized');
          return;
        }
        
        // Start listening for auth state changes
        auth.initAuthListener = initAuthListener;
        
        // Initialize auth listener
        auth.initAuthListener();
        
        // Expose auth methods globally for testing
        window.auth = auth;
        
        console.log('[AUTH] Auth module initialized successfully');
        
        // Resolve the auth ready promise
        if (window.authReadyResolve) {
          window.authReadyResolve();
          window.authReadyResolve = null;
        }
      } catch (error) {
        console.error('[AUTH] Error initializing auth:', error);
      }
    }
    
    // Start waiting for Supabase
    waitForSupabase();
  });
  
  // Also expose the auth object immediately for scripts that might need it
  window.auth = auth;
  
  return auth;
})();
